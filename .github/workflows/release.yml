name: Build

on:
  push:
    branches: [ main ]
    tags: [ "v*" ]
  pull_request:

jobs:
  native:
    name: native-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Set up GraalVM + native-image on each OS
      - name: Set up GraalVM (JDK 21)
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'   # or 'graalvm' for Oracle distribution
          github-token: ${{ secrets.GITHUB_TOKEN }}
      # ⚠️ Windows-only: keep TEMP/TMP and Gradle cache on D: (same root as workspace)
      - name: Align temp and Gradle dirs on D drive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # RUNNER_TEMP is already on D:\a\_temp on Hosted Windows
          echo "TMP=$env:RUNNER_TEMP"        >> $env:GITHUB_ENV
          echo "TEMP=$env:RUNNER_TEMP"       >> $env:GITHUB_ENV
          echo "GRADLE_USER_HOME=$env:RUNNER_TEMP\gradle" >> $env:GITHUB_ENV
      # Cache Gradle and run with the official action (cross-platform)
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          # mirrors your previous cache policy: PR/branches = read-only; main/tags = RW
          cache-read-only: ${{ github.ref != 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/') }}

      # Run Gradle (Linux/macOS)
      - name: Build native image (Linux/macOS)
        if: runner.os != 'Windows'
        run: ./gradlew --no-daemon -Dorg.gradle.jvmargs="-Xmx2g" -Pci=true nativeCompile

      # Run Gradle (Windows) – keep tmp on D: to avoid "other has different root"
      - name: Build native image (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\gradlew.bat --no-daemon "-Dorg.gradle.jvmargs=-Xmx2g" "-Djava.io.tmpdir=$env:RUNNER_TEMP" -Pci=true nativeCompile

      # Figure out the artifact file name(s)
      - name: Locate native binary path
        id: paths
        shell: bash
        run: |
          # GraalVM Build Tools default output directory:
          #   build/native/nativeCompile/
          OUT_DIR="build/native/nativeCompile"
          # Your application name is the project name by default; adjust if you changed it.
          # On Windows, the binary ends with .exe
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            BIN="$(ls "$OUT_DIR"/*.exe)"
          else
            BIN="$(ls "$OUT_DIR"/* | head -n 1)"
          fi
          echo "bin=$BIN" >> $GITHUB_OUTPUT
          echo "out_dir=$OUT_DIR" >> $GITHUB_OUTPUT
          echo "Found: $BIN"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ matrix.os }}
          path: ${{ steps.paths.outputs.bin }}
          if-no-files-found: error
          retention-days: 14

  # Optional: create a GitHub Release and attach artifacts when building a tag (e.g., v1.2.3)
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ native ]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Package versioned archives
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${GITHUB_REF#refs/tags/}"

          files=()

          # macOS
          MAC_DIR=$(compgen -G 'dist/*macos*' || true)
          if [[ -n "${MAC_DIR:-}" ]]; then
            BIN=$(ls "$MAC_DIR"/* | head -n1)
            chmod +x "$BIN"
            tar -C "$MAC_DIR" -czf "askimo-${VERSION}-darwin-arm64.tar.gz" "$(basename "$BIN")"
            files+=("askimo-${VERSION}-darwin-arm64.tar.gz")
          fi

          # Linux
          LIN_DIR=$(compgen -G 'dist/*ubuntu*' || true)
          if [[ -n "${LIN_DIR:-}" ]]; then
            BIN=$(ls "$LIN_DIR"/* | head -n1)
            chmod +x "$BIN"
            tar -C "$LIN_DIR" -czf "askimo-${VERSION}-linux-x64.tar.gz" "$(basename "$BIN")"
            files+=("askimo-${VERSION}-linux-x64.tar.gz")
          fi

          # Windows
          WIN_DIR=$(compgen -G 'dist/*windows*' || true)
          if [[ -n "${WIN_DIR:-}" ]]; then
            EXE=$(ls "$WIN_DIR"/*.exe | head -n1)
            zip -j "askimo-${VERSION}-windows-x64.zip" "$EXE"
            files+=("askimo-${VERSION}-windows-x64.zip")
          fi

          # Checksums (only for files that exist)
          if ((${#files[@]})); then
            shasum -a 256 "${files[@]}" > SHA256SUMS.txt
            files+=("SHA256SUMS.txt")
          fi

          # Emit a MULTILINE output variable called "files"
          {
            echo "files<<EOF"
            printf '%s\n' "${files[@]}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.pkg.outputs.files }}   # one path per line
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') || contains(github.ref, '-alpha') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

